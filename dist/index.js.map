{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/opts.js", "../lib/404.js", "../lib/request_listener.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'open', opts.open ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = opts;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:404' );\nvar message = string2buffer( 'File not found' );\n\n\n// MAIN //\n\n/**\n* Returns a `404` response.\n*\n* @private\n* @param {IncomingMessage} request - HTTP request object\n* @param {ServerResponse} response - HTTP response object\n*/\nfunction notFound( request, response ) {\n\tdebug( 'Sending 404 response...' );\n\tresponse.statusCode = 404;\n\tresponse.setHeader( 'Content-Type', 'text/plain' );\n\tresponse.setHeader( 'Content-Length', message.length );\n\tresponse.end( message );\n}\n\n\n// EXPORTS //\n\nmodule.exports = notFound;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar logger = require( 'debug' );\nvar readDir = require( '@stdlib/fs-read-dir' );\nvar notFound = require( './404.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:request-listener' );\n\n\n// MAIN //\n\n/**\n* Returns a request listener for serving a directory.\n*\n* @private\n* @param {Options} opts - server options\n* @param {string} opts.dir - directory to serve\n* @returns {Function} request listener\n*/\nfunction requestListener( opts ) {\n\treturn onRequest;\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request when serving a directory.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction onRequest( request, response ) {\n\t\tvar path;\n\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\t// Resolve the directory path, making sure to guard against attempts to access parent directories...\n\t\tpath = request.url.substring( 1 ); // remove leading `/`\n\t\tpath = resolve( opts.dir, path );\n\t\tif ( path.substring( opts.dir.length ) === '' ) {\n\t\t\tpath = opts.dir;\n\t\t}\n\t\tdebug( 'Request resolved to path %s', path );\n\t\tdebug( 'Reading directory' );\n\t\treadDir( path, onDir );\n\n\t\t/**\n\t\t* Callback invoked after reading a directory's contents.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {StringArray} contents - directory contents\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onDir( error, contents ) { // eslint-disable-line no-unused-vars\n\t\t\tif ( error ) {\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'ENOENT' ||\n\t\t\t\t\terror.code === 'ENOTDIR'\n\t\t\t\t) {\n\t\t\t\t\t// Return a `404` response...\n\t\t\t\t\treturn notFound( response );\n\t\t\t\t}\n\t\t\t\t// TODO\n\t\t\t}\n\t\t\t// TODO\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = requestListener;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar createServer = require( '@stdlib/net-http-server' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar openURL = require( '@stdlib/utils-open-url' );\nvar format = require( '@stdlib/string-format' );\nvar noop = require( '@stdlib/utils-noop' );\nvar validate = require( './validate.js' );\nvar serverOpts = require( './opts.js' );\nvar requestListener = require( './request_listener.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a simple HTTP server. The implementation takes inspiration from Python's [SimpleHTTPServer][python-simplehttpserver].\n*\n* [python-simplehttpserver]: https://docs.python.org/2/library/simplehttpserver.html\n*\n* @param {Options} [options] - server options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - indicates whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer() {\n\tvar options;\n\tvar server;\n\tvar sopts;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\tclbk = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( clbk === void 0 ) {\n\t\tclbk = noop;\n\t}\n\tif ( opts.dir ) {\n\t\topts.dir = path.resolve( cwd(), opts.dir );\n\t}\n\tdebug( 'Serving directory: %s', opts.dir );\n\n\t// Extract server options...\n\tif ( options ) {\n\t\tsopts = serverOpts( options );\n\t} else {\n\t\tsopts = {};\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener( opts ) );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a simple HTTP server.\n*\n* @module @stdlib/net-simple-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net-simple-http-server' );\n*\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isBoolean", "isString", "isObject", "hasOwnProp", "format", "validate", "opts", "options", "require_opts", "__commonJSMin", "exports", "module", "hasOwnProp", "opts", "options", "out", "require__", "__commonJSMin", "exports", "module", "logger", "string2buffer", "debug", "message", "notFound", "request", "response", "require_request_listener", "__commonJSMin", "exports", "module", "resolve", "logger", "readDir", "notFound", "debug", "requestListener", "opts", "onRequest", "request", "response", "path", "onDir", "error", "contents", "require_main", "__commonJSMin", "exports", "module", "path", "logger", "cwd", "createServer", "isFunction", "openURL", "format", "noop", "validate", "serverOpts", "requestListener", "debug", "httpServer", "options", "server", "sopts", "clbk", "boot", "opts", "err", "onServer", "error", "_server", "addr", "onClose", "main"]
}
