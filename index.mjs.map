{"version":3,"file":"index.mjs","sources":["../node_modules/debug/src/index.js","../lib/validate.js","../lib/opts.js","../lib/404.js","../lib/request_listener.js","../lib/server.js","../lib/index.js"],"sourcesContent":["/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( 'invalid option. `dir` option must be a primitive string. Option: `' + opts.dir + '`.' );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( 'invalid option. `open` option must be a primitive boolean. Option: `' + opts.open + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = opts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:404' );\nvar message = string2buffer( 'File not found' );\n\n\n// MAIN //\n\n/**\n* Returns a `404` response.\n*\n* @private\n* @param {IncomingMessage} request - HTTP request object\n* @param {ServerResponse} response - HTTP response object\n*/\nfunction notFound( request, response ) {\n\tdebug( 'Sending 404 response...' );\n\tresponse.statusCode = 404;\n\tresponse.setHeader( 'Content-Type', 'text/plain' );\n\tresponse.setHeader( 'Content-Length', message.length );\n\tresponse.end( message );\n}\n\n\n// EXPORTS //\n\nmodule.exports = notFound;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar logger = require( 'debug' );\nvar readDir = require( '@stdlib/fs-read-dir' );\nvar notFound = require( './404.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:request-listener' );\n\n\n// MAIN //\n\n/**\n* Returns a request listener for serving a directory.\n*\n* @private\n* @param {Options} opts - server options\n* @param {string} opts.dir - directory to serve\n* @returns {Function} request listener\n*/\nfunction requestListener( opts ) {\n\treturn onRequest;\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request when serving a directory.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction onRequest( request, response ) {\n\t\tvar path;\n\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\t// Resolve the directory path, making sure to guard against attempts to access parent directories...\n\t\tpath = request.url.substring( 1 ); // remove leading `/`\n\t\tpath = resolve( opts.dir, path );\n\t\tif ( path.substring( opts.dir.length ) === '' ) {\n\t\t\tpath = opts.dir;\n\t\t}\n\t\tdebug( 'Request resolved to path %s', path );\n\t\tdebug( 'Reading directory' );\n\t\treadDir( path, onDir );\n\n\t\t/**\n\t\t* Callback invoked after reading a directory's contents.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {StringArray} contents - directory contents\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onDir( error, contents ) { // eslint-disable-line no-unused-vars\n\t\t\tif ( error ) {\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'ENOENT' ||\n\t\t\t\t\terror.code === 'ENOTDIR'\n\t\t\t\t) {\n\t\t\t\t\t// Return a `404` response...\n\t\t\t\t\treturn notFound( response );\n\t\t\t\t}\n\t\t\t\t// TODO\n\t\t\t}\n\t\t\t// TODO\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = requestListener;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar createServer = require( '@stdlib/net-http-server' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar openURL = require( '@stdlib/utils-open-url' );\nvar noop = require( '@stdlib/utils-noop' );\nvar validate = require( './validate.js' );\nvar serverOpts = require( './opts.js' );\nvar requestListener = require( './request_listener.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a simple HTTP server. The implementation takes inspiration from Python's [SimpleHTTPServer][python-simplehttpserver].\n*\n* [python-simplehttpserver]: https://docs.python.org/2/library/simplehttpserver.html\n*\n* @param {Options} [options] - server options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - indicates whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer() {\n\tvar options;\n\tvar server;\n\tvar sopts;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\tclbk = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( clbk === void 0 ) {\n\t\tclbk = noop;\n\t}\n\tif ( opts.dir ) {\n\t\topts.dir = path.resolve( cwd(), opts.dir );\n\t}\n\tdebug( 'Serving directory: %s', opts.dir );\n\n\t// Extract server options...\n\tif ( options ) {\n\t\tsopts = serverOpts( options );\n\t} else {\n\t\tsopts = {};\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener( opts ) );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a simple HTTP server.\n*\n* @module @stdlib/net-simple-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net-simple-http-server' );\n*\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\n\n// MODULES //\n\nvar httpServer = require( './server.js' );\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n"],"names":["module","exports","process","type","require","isBoolean","require$$0","isPrimitive","isString","require$$1","isObject","require$$2","hasOwnProp","require$$3","validate_1","opts","options","dir","TypeError","open","opts_1","out","port","maxport","hostname","address","string2buffer","debug","message","_404","request","response","statusCode","setHeader","length","end","resolve","readDir","notFound","request_listener","path","url","substring","error","contents","code","cwd","createServer","isFunction","require$$4","openURL","require$$5","noop","require$$6","validate","require$$7","serverOpts","require$$8","requestListener","require$$9","server","sopts","clbk","boot","err","arguments","onServer","_server","addr","once","onClose","lib"],"mappings":"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"}